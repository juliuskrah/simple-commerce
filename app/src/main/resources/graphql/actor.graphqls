extend type Query {
    me: User!
    actor(username: String!): Actor
}

extend type Mutation {
    """
    Assign permissions to an actor. The permissions are specified as a list of PermissionTupleInput objects. The following namespaces are supported:
    - Product
    - Order
    - Group
    - Actor
    - Category
    - ProductVariant
    Returns the updated Actor object with the newly assigned permissions if an actor exists for the provided username; otherwise, returns null.
    """
    assignPermissionsToActor(username: String!, permissions: [PermissionTupleInput!]!): Actor
    """
    Revoke permissions from an actor. The permissions are specified as a list of PermissionTupleInput objects. The following namespaces are supported:
    - Product
    - Order
    - Group
    - Actor
    - Category
    - ProductVariant
    Returns the updated Actor object with the revoked permissions if an actor exists for the provided username; otherwise, returns null.
    """
    revokePermissionsFromActor(username: String!, permissions: [PermissionTupleInput!]!): Actor
    createUser(input: CreateUserInput!): User!
    createBot(input: CreateBotInput!): Bot!
}

"An `Actor` is an entity that can perform actions in the system."
interface Actor implements Node {
    id: ID!
    username: String!
    createdAt: DateTime!
    updatedAt: DateTime!
}

"A staff member who can manage the admin dashboard and system functions."
type User implements Node & Actor {
    id: ID!
    username: String!
    email: String
    department: String
    createdAt: DateTime!
    updatedAt: DateTime!
    lastLogin: DateTime
}

"A customer who can interact with the storefront and complete purchases."
type Customer implements Node & Actor {
    id: ID!
    username: String!
    email: String
    firstName: String
    lastName: String
    customerGroup: CustomerGroup!
    createdAt: DateTime!
    updatedAt: DateTime!
    lastLogin: DateTime
}

"A bot used for automation and external application integration."
type Bot implements Node & Actor {
    id: ID!
    username: String!
    email: String
    appId: String
    permissions: [String!]!
    createdAt: DateTime!
    updatedAt: DateTime!
    lastLogin: DateTime
}

enum CustomerGroup {
    B2C
    B2B
    VIP
    WHOLESALE
}

input CreateUserInput {
    username: String!
    email: String!
    department: String
    role: String
}

input CreateBotInput {
    username: String!
    email: String
    appId: String
    permissions: [String!]
}

input PermissionTupleInput {
    "The namespace of the object, e.g., 'Product', 'Order', 'Group', 'Actor', 'Category', 'ProductVariant'."
    namespace: String!
    "The specific object within the namespace, e.g., a product ID, order ID, or group name."
    object: String!
    "Represents the relation or action being performed, e.g., 'viewer', 'editor', 'owner'."
    relation: String!
    "The subject (actor) to whom the permission applies. This can be either a specific actor ID or a subject set."
    subject: SubjectInput!
}

input SubjectInput @oneOf {
    "The ID of a specific actor (user, customer, or bot)."
    subjectId: String
    "A set of subjects defined by namespace, object, and relation."
    subjectSet: SubjectSetInput
}

input SubjectSetInput {
    "The namespace of the subject set, e.g., 'Product', 'Order', 'Group', 'Actor', 'Category', 'ProductVariant'."
    namespace: String
    "The specific object within the namespace, e.g., a product ID, order ID, or group name."
    object: String
    "Represents the relation or action being performed, e.g., 'member', 'parent', 'editor'."
    relation: String
}
