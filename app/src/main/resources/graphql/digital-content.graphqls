extend type Mutation {
    """
    Add media to a product. The product's media can be used to showcase the product. The following types of
    media can be added: images, videos, 3D models, and audio files.
    When uploading new media, you must first stage the upload by calling the [stagedUpload](#stagedUpload) mutation
    before calling this mutation.

    ```graphql
    mutation stageUpload($input: StagedUploadInput!) {
        stagedUpload(input: $input) {
            presignedUrl
            resourceUrl
            contentType
        }
    }
    ```

    Upload the file using `presignedUrl` and `contentType` from the [stagedUpload](#stagedUpload) mutation.
    Then use the `resourceUrl` when calling this mutation.
    """
    addProductMedia(productId: ID!, file: FileInput!): MediaFile
    """
    Create a presigned URL for uploading a file to a cloud storage service. This is the first
    step in the upload process.
    """
    stagedUpload(input: StagedUploadInput!): StagedUpload
}

extend type Product {
    "Public URI to the product's media."
    media: [MediaFile!]
}

"A downloadable file that is associated with a product variant."
type DigitalContent implements Node & File {
    id: ID!
    createdAt: DateTime!
    variant: ProductVariant!
    updatedAt: DateTime!
    url: URL!
    contentType: String
}

"A file that is associated with a product. This can be an image, video, 3D model, or audio file."
type MediaFile implements Node & File {
    id: ID!
    createdAt: DateTime!
    contentType: String
    updatedAt: DateTime!
    url: URL!
}

"Information about a staged upload, which should be used to send a request to upload a file."
type StagedUpload {
    presignedUrl: URL
    resourceUrl: URL
    contentType: String
}

input StagedUploadInput {
    filename: String!
    contentType: String
}

input FileInput {
    resourceUrl: URL!
    contentType: String
}

"A representation of a digital object. This is usually a DigitalContent or MediaFile."
interface File implements Node {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime!
}
