type Query {
    """
    Query a node by its global ID.
    e.g.

    ```graphql
    query nodeDetails($id: ID!) {
        node(id: $id) {
            id
            ...on Product {
                __typename
                title
                slug
                createdAt
                updatedAt
                price {
                    amount
                    currency
                }
            }
            ...on MediaFile {
                __typename
                url
                contentType
                createdAt
                updatedAt
            }
        }
    }
    ```
    """
    node(id: ID!): Node
}

"A monetary value with a currency."
type Money {
    amount: Decimal!
    currency: Currency!
}

"An object with an ID."
interface Node {
    "The global ID of the object."
    id: ID!
}

enum OrderDirection {
    "Specifies an ascending order for a given `orderBy` argument."
    ASC
    "Specifies a descending order for a given `orderBy` argument."
    DESC
}

scalar Currency
    @specifiedBy(url:
        "https://en.wikipedia.org/wiki/ISO_4217"
    )

scalar DateTime
    @specifiedBy(url:
        "https://scalars.graphql.org/andimarek/date-time.html"
    )

"A scalar which represents java.math.BigDecimal."
scalar Decimal

"A json formatted String."
scalar JsonString

scalar URL
    @specifiedBy(url:
        "https://www.w3.org/Addressing/URL/url-spec.txt"
    )

schema {
    query: Query
    # Update all mutations to take an argument named `input`. The input type should
    # be named after the mutation name.
    # e.g.
    # type Mutation {
    #   createProduct(input: CreateProductInput!): Product
    # }
    mutation: Mutation
}

"""
The `@Expression` validation directive allows a Java EL to be used to help build validation rules.
Java EL is a powerful expression syntax for expressing validation conditions.
"""
directive @Expression(value : String!, message : String = "graphql.validation.Expression.message")
    on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

"""
The element must be a positive number.

- Example: `categories(first: Int @Positive): CategoryConnection!`
- Applies to: `Byte`, `Short`, `Int`, `Long`, `Float`, `Lists`, `BigDecimal`, `BigInteger`.
"""
directive @Positive(message : String = "graphql.validation.Positive.message")
    on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @oneOf on INPUT_OBJECT
