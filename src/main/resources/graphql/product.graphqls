extend type Query {
    "Find a product by its ID."
    product(id: ID): Product
    "Find all products."
    products(first: Int @Positive, after: String, last: Int @Positive, before: String,
        orderBy: [ProductOrderField], orderDirection: OrderDirection = ASC):
    ProductConnection! @Expression(value : "${args.containsOneOf('first','last')}")
}

type Mutation {
    "Create a new product."
    addProduct(input: ProductInput!): Product
    "Update an existing product."
    updateProduct(id: ID!, input: ProductInput!): Product
    "Delete a product."
    deleteProduct(id: ID!): ID!
}

type Product implements Node {
    id: ID!
    category: Category
    createdAt: DateTime!
    "Actor that created the product. This is a restricted field and can only be seen by users with the proper permissions."
    createdBy: Actor
    description: JsonString
    """
    The slug is a uniquely generated URI friendly identifier for a product.
    It is generated from the title of the product. A number is appended
    to the end of the slug if a product with the same slug already exists.
    """
    slug: String!
    status: ProductStatus!
    priceRange: PriceRange
    priceSet: PriceSet
    tags(limit: Int!): [String!]
    title: String!
    updatedAt: DateTime!
    "Actor that updated the product. This is a restricted field and can only be seen by users with the proper permissions."
    updatedBy: Actor
}

type PriceRange {
    start: Money
    stop: Money
}

type PriceSet {
    id: ID!
    createdAt: DateTime!
    prices: [Money!]
    updatedAt: DateTime!
}

input ProductInput {
    description: String
    price: Decimal
    tags: [String!]
    title: String!
    status: ProductStatus = DRAFT
}

enum ProductStatus {
    DRAFT
    PUBLISHED
}

enum ProductOrderField {
    id
    createdAt
    updatedAt
}
